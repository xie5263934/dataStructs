package com.test.recursion;

/**
 * @Auth:jinrun.xie
 * @Date:2020/9/14 熟悉递归，使用N个楼梯问题来练习，假设有一个N个阶梯的楼梯，我们可以一次垮1个阶梯，2个阶梯，3个阶梯，那么对于一共有N个阶梯的楼梯，一共有多少种走法
 * 对于递归，首先我们可以将当前要处理的问题分解成除了数据规模不一样，但是解法一模一样的子问题，然后我们假设子问题已经解决了，那么只需要找出子问题和当前问题之间的关系，也就是要解决当前
 * 问题，我们分解成子问题，但是子问题已经解决了，通过子问题如何能解决当前问题。第三递归要有终止条件，不能无限制递归
 * <p>
 * 对于当前的问题，我们假设我们要解决N个楼梯的走法一共是f（n）种走法，那么假设我们第一步走一个阶梯，那么剩下的楼梯的走法就是f(n-1),假设我们第一步走两个阶梯，那么剩下的楼梯的走法就是
 * f(n-2),假设我们第一步走三个楼梯，那么剩下的楼梯的走法就是f(n-3),那么我们假设我们走了第一步之后，剩余的楼梯的走法已经解决了，那么我们要确定当前所有楼梯的走法，那么就是所有子走法的和
 * 也就是f(n)=f(n-1)+f(n-2)+f(n-3)
 * 并且对于终止条件，如果只剩余一个楼梯，那么只有走一个阶梯的一种走法
 * 如果剩余两个楼梯，那么有一次走两个阶梯，或者一次走一个阶梯，走两次的两种走法
 * 如果剩余三个楼梯，那么有一次走三个阶梯，或者一次走两个阶梯，一次走一个阶梯，或者一次走一个阶梯，走三次的三种走法
 **/
public class StairsProblem {

    public int stairNumbers(int n) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        } else if (n == 3) {
            return 3;
        }
        return stairNumbers(n - 1) + stairNumbers(n - 2) + stairNumbers(n - 3);
    }
}
