package com.test.dy;

/**
 * @Auth 45208
 * @Date 6/8/2021
 * 用状态转移表法来解决选硬币问题，假设我们有，1，3，5三种面值的三种硬币，现在我们要凑够9元，最少要选用多少个硬币，那么答案是3中，例如3，3，3，或者1，3，5
 * 实现方式，我们使用一个二位的状态数据，然后对状态进行递归，每一行表示从上一行到达当前行的递推结果，其中每一行对应的列号就是我们期望达到的结果，如果当某一行的某一列的值为true的时候，那么我们就获取到
 * 我们想要的结果了，否者就继续下推下一行，将结果往后递推
 **/
public class DyCoin {
    private int[] coins = new int[]{1, 3, 5};

    public int money(int money) {
        /**
         * 定义一个状态转移表，其中这个表的行表示走的步骤，其中列表示金额，当在某个行的某个列的下标达到目标了，表示就到达了我们想要获得的结果
         */
        boolean[][] state = new boolean[money][money + 1];
        /**
         * 对第0行做初始化，注意边界，因为有可能输入的值小于其中的某些硬币的面值
         */
        for (int p : coins) {
            if (p <= money) {
                state[0][p] = true;
            }
        }
        /**
         * 首先检查依次有没有达到目标，因为有可能输入的值正好等于某个硬币的面值
         */
        if (state[0][money]) {
            return 1;
        }
        /**
         * 开始递推的过程，其中行表示走的步骤，每一行的值都从上一行i-1递推过来的，所以默认我们都会初始化第0行，然后从第1行开始
         * 对于每一行的每一列表示我们能够达到的一个金额目标，如果那一列的值是true，表示我们能够从上一行加上一个硬币的面值达到这个数值，
         * 如果是false，表示我们达不到，如果列的下标等于money的列是ture了。那么说明我们到达了我们所期望得到的金额值，这个时候就直接返回。
         */
        for (int i = 1; i < money; i++) {
            for (int j = 1; j <= money; j++) {
                /**
                 * 收下判断上一层的状态是否是正确的
                 */
                if (state[i - 1][j]) {
                    /**
                     * 通过上一层的状态，然后加上硬币的面值，来递推当前层的状态，但是要注意边界问题，防止越界
                     */
                    for (int p : coins) {
                        if (j + p <= money) {
                            state[i][j + p] = true;
                        }
                    }
                }
                /**
                 * 其实对于这个问题，核心的点就是，我们用列来表示金额，无论在哪一行，只要money对应的列的值为true了。表示我们一定有一条路径能够到达这一列，也就是我们经过了一定的步骤
                 * 得到了我们想要的目标，那么我们就返回结果。
                 */
                if (state[i][money]) {
                    return i + 1;
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        DyCoin coin = new DyCoin();
        System.out.println(coin.money(2));
    }
}
